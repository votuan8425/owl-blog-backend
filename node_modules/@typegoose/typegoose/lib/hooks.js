"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Post = exports.Pre = exports.post = exports.pre = void 0;
const constants_1 = require("./internal/constants");
const utils_1 = require("./internal/utils");
const logSettings_1 = require("./logSettings");
// TSDoc for the hooks can't be added without adding it to *every* overload
const hooks = {
    pre(...args) {
        return (target) => addToHooks(target, 'pre', args);
    },
    post(...args) {
        return (target) => addToHooks(target, 'post', args);
    },
};
/**
 * Add a hook to the hooks Array
 * @param target Target Class
 * @param hookType What type is it
 * @param args All Arguments, that should be passed-throught
 */
function addToHooks(target, hookType, args) {
    var _a, _b, _c;
    // Convert Method to array if only a string is provided
    const methods = Array.isArray(args[0]) ? args[0] : [args[0]];
    const func = args[1];
    const hookOptions = (_a = args[2]) !== null && _a !== void 0 ? _a : {};
    // REFACTOR: re-write this to be a Error inside errors.ts
    utils_1.assertion(typeof func === 'function', new TypeError(`"${utils_1.getName(target)}.${hookType}.${methods.join(' ')}"'s function is not a function!`));
    // REFACTOR: re-write this to be a Error inside errors.ts
    utils_1.assertion(typeof hookOptions === 'object' && !utils_1.isNullOrUndefined(hookOptions), new TypeError(`"${utils_1.getName(target)}.${hookType}.${methods.join(' ')}"'s hookOptions is not a normal object!`));
    if (args.length > 3) {
        logSettings_1.logger.warn(`"addToHooks" parameter "args" has a length of over 3 (length: ${args.length})`);
    }
    logSettings_1.logger.info('Adding hooks for "[%s]" to "%s" as type "%s"', methods.join(','), utils_1.getName(target), hookType);
    for (const method of methods) {
        switch (hookType) {
            case 'post':
                const postHooks = Array.from((_b = Reflect.getMetadata(constants_1.DecoratorKeys.HooksPost, target)) !== null && _b !== void 0 ? _b : []);
                postHooks.push({ func, method, options: hookOptions });
                Reflect.defineMetadata(constants_1.DecoratorKeys.HooksPost, postHooks, target);
                break;
            case 'pre':
                const preHooks = Array.from((_c = Reflect.getMetadata(constants_1.DecoratorKeys.HooksPre, target)) !== null && _c !== void 0 ? _c : []);
                preHooks.push({ func, method, options: hookOptions });
                Reflect.defineMetadata(constants_1.DecoratorKeys.HooksPre, preHooks, target);
                break;
        }
    }
}
exports.pre = hooks.pre;
exports.post = hooks.post;
// Export it PascalCased
exports.Pre = hooks.pre;
exports.Post = hooks.post;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9va3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaG9va3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0Esb0RBQXFEO0FBQ3JELDRDQUF5RTtBQUN6RSwrQ0FBdUM7QUE4RXZDLDJFQUEyRTtBQUMzRSxNQUFNLEtBQUssR0FBVTtJQUNuQixHQUFHLENBQUMsR0FBRyxJQUFJO1FBQ1QsT0FBTyxDQUFDLE1BQVcsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUNELElBQUksQ0FBQyxHQUFHLElBQUk7UUFDVixPQUFPLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0YsQ0FBQztBQUVGOzs7OztHQUtHO0FBQ0gsU0FBUyxVQUFVLENBQUMsTUFBVyxFQUFFLFFBQXdCLEVBQUUsSUFBVzs7SUFDcEUsdURBQXVEO0lBQ3ZELE1BQU0sT0FBTyxHQUFVLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRSxNQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sV0FBVyxHQUFzQixNQUFBLElBQUksQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRSxDQUFDO0lBRXJELHlEQUF5RDtJQUN6RCxpQkFBUyxDQUNQLE9BQU8sSUFBSSxLQUFLLFVBQVUsRUFDMUIsSUFBSSxTQUFTLENBQUMsSUFBSSxlQUFPLENBQUMsTUFBTSxDQUFDLElBQUksUUFBUSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQ3JHLENBQUM7SUFDRix5REFBeUQ7SUFDekQsaUJBQVMsQ0FDUCxPQUFPLFdBQVcsS0FBSyxRQUFRLElBQUksQ0FBQyx5QkFBaUIsQ0FBQyxXQUFXLENBQUMsRUFDbEUsSUFBSSxTQUFTLENBQUMsSUFBSSxlQUFPLENBQUMsTUFBTSxDQUFDLElBQUksUUFBUSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHlDQUF5QyxDQUFDLENBQzdHLENBQUM7SUFFRixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1FBQ25CLG9CQUFNLENBQUMsSUFBSSxDQUFDLGlFQUFpRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztLQUM5RjtJQUVELG9CQUFNLENBQUMsSUFBSSxDQUFDLDhDQUE4QyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsZUFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTFHLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzVCLFFBQVEsUUFBUSxFQUFFO1lBQ2hCLEtBQUssTUFBTTtnQkFDVCxNQUFNLFNBQVMsR0FBa0IsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUMseUJBQWEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLG1DQUFJLEVBQUUsQ0FBQyxDQUFDO2dCQUN4RyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztnQkFDdkQsT0FBTyxDQUFDLGNBQWMsQ0FBQyx5QkFBYSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ25FLE1BQU07WUFDUixLQUFLLEtBQUs7Z0JBQ1IsTUFBTSxRQUFRLEdBQWtCLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBQSxPQUFPLENBQUMsV0FBVyxDQUFDLHlCQUFhLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxtQ0FBSSxFQUFFLENBQUMsQ0FBQztnQkFDdEcsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7Z0JBQ3RELE9BQU8sQ0FBQyxjQUFjLENBQUMseUJBQWEsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNqRSxNQUFNO1NBQ1Q7S0FDRjtBQUNILENBQUM7QUFFWSxRQUFBLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO0FBQ2hCLFFBQUEsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7QUFFL0Isd0JBQXdCO0FBQ1gsUUFBQSxHQUFHLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztBQUNoQixRQUFBLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDIn0=